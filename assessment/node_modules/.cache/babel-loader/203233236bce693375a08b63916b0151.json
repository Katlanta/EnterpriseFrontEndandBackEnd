{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chloe\\\\assessmentbandf\\\\EnterpriseFrontEndandBackEnd\\\\assessment\\\\src\\\\Components\\\\Login.jsx\",\n    _s = $RefreshSig$();\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//Standard Imports!\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nimport { Button, Form, InputGroup, Row } from \"react-bootstrap\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport '../Styles/Login.css'; //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//Essentially a repeat of the registration file! Constants for later!\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Login(_ref) {\n  _s();\n\n  let {\n    user,\n    setUser\n  } = _ref;\n  const [validated, setValidated] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [redirect, setRedirect] = useState(false);\n  const navigate = useNavigate(); //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  //Again useEffect for redirecting etc\n  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n  useEffect(() => {\n    if (user.username) {\n      setRedirect(true);\n    }\n  }, []);\n  useEffect(() => {\n    if (redirect) {\n      navigate(\"/\");\n    }\n  }, [redirect]); //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  //Again handles validity and accessing the database.\n  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    event.stopPropagation();\n    const form = event.currentTarget;\n    setValidated(true);\n\n    if (form.checkValidity() === true) {\n      try {\n        const result = await axios({\n          method: 'post',\n          url: process.env.REACT_APP_API_URL + 'users/login',\n          data: {\n            username: username,\n            password: password\n          }\n        }); //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n        //Upon successful entry user redirects, if not display error\n        //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n        if (result.data.success) {\n          setUser(result.data.user);\n          setRedirect(true);\n        } else {\n          setError(result.data.error);\n        }\n      } catch (e) {\n        setError(e.toString());\n      }\n    }\n  }; //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  //Again Form to display information/input boxes/buttons\n  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    noValidate: true,\n    style: {\n      maxWidth: \"400px\",\n      padding: \"20px\",\n      margin: \"20px auto\"\n    },\n    validated: validated,\n    onSubmit: handleSubmit,\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"username\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Username/Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          required: true,\n          type: \"text\",\n          placeholder: \"Username\",\n          value: username,\n          onChange: e => setUsername(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"password\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n          hasValidation: true,\n          children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"password\",\n            placeholder: \"password\",\n            required: true,\n            value: password,\n            onChange: e => setPassword(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n            type: \"invalid\",\n            children: \" Enter a Valid Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"submit\",\n      size: \"lg\",\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 13\n  }, this);\n}\n\n_s(Login, \"DvGq4k316dCfzPJX2aRhQO46z/c=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/chloe/assessmentbandf/EnterpriseFrontEndandBackEnd/assessment/src/Components/Login.jsx"],"names":["Button","Form","InputGroup","Row","useEffect","useState","axios","useNavigate","Login","user","setUser","validated","setValidated","username","setUsername","password","setPassword","error","setError","redirect","setRedirect","navigate","handleSubmit","event","preventDefault","stopPropagation","form","currentTarget","checkValidity","result","method","url","process","env","REACT_APP_API_URL","data","success","e","toString","maxWidth","padding","margin","color","target","value"],"mappings":";;;AAAA;AACA;AACA;AACA,SAAQA,MAAR,EAAgBC,IAAhB,EAAsBC,UAAtB,EAAkCC,GAAlC,QAA4C,iBAA5C;AACA,SAAQC,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,WAAR,QAA0B,kBAA1B;AACA,OAAO,qBAAP,C,CAEA;AACA;AACA;;;AACA,eAAe,SAASC,KAAT,OAAgC;AAAA;;AAAA,MAAjB;AAACC,IAAAA,IAAD;AAAOC,IAAAA;AAAP,GAAiB;AAC3C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACc,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAMgB,QAAQ,GAAGd,WAAW,EAA5B,CAN2C,CAQ/C;AACA;AACA;;AACIH,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIK,IAAI,CAACI,QAAT,EAAmB;AACfO,MAAAA,WAAW,CAAC,IAAD,CAAX;AACH;AACJ,GAJQ,EAIN,EAJM,CAAT;AAMAhB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIe,QAAJ,EAAc;AACVE,MAAAA,QAAQ,CAAC,GAAD,CAAR;AACH;AACJ,GAJQ,EAIN,CAACF,QAAD,CAJM,CAAT,CAjB2C,CAsB/C;AACA;AACA;;AACI,QAAMG,YAAY,GAAG,MAAOC,KAAP,IAAiB;AAClCA,IAAAA,KAAK,CAACC,cAAN;AACAD,IAAAA,KAAK,CAACE,eAAN;AACA,UAAMC,IAAI,GAAGH,KAAK,CAACI,aAAnB;AAEAf,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AAEA,QAAIc,IAAI,CAACE,aAAL,OAAyB,IAA7B,EAAmC;AAC/B,UAAI;AACA,cAAMC,MAAM,GAAG,MAAMvB,KAAK,CAAC;AACvBwB,UAAAA,MAAM,EAAE,MADe;AAEvBC,UAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC,iBAAZ,GAAgC,aAFd;AAGvBC,UAAAA,IAAI,EAAE;AACFtB,YAAAA,QAAQ,EAAEA,QADR;AAEFE,YAAAA,QAAQ,EAAEA;AAFR;AAHiB,SAAD,CAA1B,CADA,CAShB;AACA;AACA;;AACgB,YAAIc,MAAM,CAACM,IAAP,CAAYC,OAAhB,EAAyB;AACrB1B,UAAAA,OAAO,CAACmB,MAAM,CAACM,IAAP,CAAY1B,IAAb,CAAP;AACAW,UAAAA,WAAW,CAAC,IAAD,CAAX;AACH,SAHD,MAGO;AACHF,UAAAA,QAAQ,CAACW,MAAM,CAACM,IAAP,CAAYlB,KAAb,CAAR;AACH;AACJ,OAlBD,CAkBE,OAAOoB,CAAP,EAAU;AACRnB,QAAAA,QAAQ,CAACmB,CAAC,CAACC,QAAF,EAAD,CAAR;AACH;AACJ;AACJ,GA9BD,CAzB2C,CAwD/C;AACA;AACA;;;AACI,sBAAQ,QAAC,IAAD;AAAM,IAAA,UAAU,MAAhB;AAAiB,IAAA,KAAK,EAAE;AAACC,MAAAA,QAAQ,EAAE,OAAX;AAAoBC,MAAAA,OAAO,EAAE,MAA7B;AAAqCC,MAAAA,MAAM,EAAC;AAA5C,KAAxB;AAAkF,IAAA,SAAS,EAAE9B,SAA7F;AAAwG,IAAA,QAAQ,EAAEW,YAAlH;AAAA,eACHL,KAAK,iBAAI;AAAK,MAAA,KAAK,EAAE;AAACyB,QAAAA,KAAK,EAAE;AAAR,OAAZ;AAAA,gBAA6BzB;AAA7B;AAAA;AAAA;AAAA;AAAA,YADN,eAEJ,QAAC,GAAD;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BACI,QAAC,IAAD,CAAM,KAAN;AAAY,QAAA,SAAS,EAAC,UAAtB;AAAA,gCACI,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,IAAD,CAAM,OAAN;AAAc,UAAA,QAAQ,MAAtB;AAAuB,UAAA,IAAI,EAAC,MAA5B;AAAmC,UAAA,WAAW,EAAC,UAA/C;AAA0D,UAAA,KAAK,EAAEJ,QAAjE;AAA2E,UAAA,QAAQ,EAAGwB,CAAD,IAAOvB,WAAW,CAACuB,CAAC,CAACM,MAAF,CAASC,KAAV;AAAvG;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI,QAAC,IAAD,CAAM,KAAN;AAAY,QAAA,SAAS,EAAC,UAAtB;AAAA,gCACI,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,UAAD;AAAY,UAAA,aAAa,MAAzB;AAAA,kCACI,QAAC,IAAD,CAAM,OAAN;AAAc,YAAA,IAAI,EAAC,UAAnB;AAA8B,YAAA,WAAW,EAAC,UAA1C;AAAqD,YAAA,QAAQ,MAA7D;AAA8D,YAAA,KAAK,EAAE7B,QAArE;AAA+E,YAAA,QAAQ,EAAGsB,CAAD,IAAOrB,WAAW,CAACqB,CAAC,CAACM,MAAF,CAASC,KAAV;AAA3G;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,IAAD,CAAM,OAAN,CAAc,QAAd;AAAuB,YAAA,IAAI,EAAC,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFI,eAeJ,QAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAqB,MAAA,IAAI,EAAC,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAfI;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR;AAiBH;;GA5EuBpC,K;UAMHD,W;;;KANGC,K","sourcesContent":["//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n//Standard Imports!\r\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nimport {Button, Form, InputGroup, Row} from \"react-bootstrap\";\r\nimport {useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport '../Styles/Login.css';\r\n\r\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n//Essentially a repeat of the registration file! Constants for later!\r\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nexport default function Login({user, setUser}) {\r\n    const [validated, setValidated] = useState(false);\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [error, setError] = useState(\"\");\r\n    const [redirect, setRedirect] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n//Again useEffect for redirecting etc\r\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    useEffect(() => {\r\n        if (user.username) {\r\n            setRedirect(true);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (redirect) {\r\n            navigate(\"/\");\r\n        }\r\n    }, [redirect]);\r\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n//Again handles validity and accessing the database.\r\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        const form = event.currentTarget;\r\n\r\n        setValidated(true);\r\n\r\n        if (form.checkValidity() === true) {\r\n            try {\r\n                const result = await axios({\r\n                    method: 'post',\r\n                    url: process.env.REACT_APP_API_URL + 'users/login',\r\n                    data: {\r\n                        username: username,\r\n                        password: password\r\n                    }\r\n                });\r\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n//Upon successful entry user redirects, if not display error\r\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n                if (result.data.success) {\r\n                    setUser(result.data.user);\r\n                    setRedirect(true);\r\n                } else {\r\n                    setError(result.data.error);\r\n                }\r\n            } catch (e) {\r\n                setError(e.toString());\r\n            }\r\n        }\r\n    };\r\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n//Again Form to display information/input boxes/buttons\r\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    return  <Form noValidate style={{maxWidth: \"400px\", padding: \"20px\", margin:\"20px auto\"}} validated={validated} onSubmit={handleSubmit}>\r\n        {error && <div style={{color: \"red\"}}>{error}</div>}\r\n        <Row className=\"mb-3\">\r\n            <Form.Group controlId='username'>\r\n                <Form.Label>Username/Email</Form.Label>\r\n                <Form.Control required type=\"text\" placeholder=\"Username\" value={username} onChange={(e) => setUsername(e.target.value)}/>\r\n            </Form.Group>\r\n            <Form.Group controlId='password'>\r\n                <Form.Label>Password</Form.Label>\r\n                <InputGroup hasValidation>\r\n                    <Form.Control type=\"password\" placeholder=\"password\" required value={password} onChange={(e) => setPassword(e.target.value)}/>\r\n                    <Form.Control.Feedback type=\"invalid\"> Enter a Valid Password</Form.Control.Feedback>\r\n                </InputGroup>\r\n            </Form.Group>\r\n        </Row>\r\n        <Button type=\"submit\"size=\"lg\">Login</Button>\r\n    </Form>;\r\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chloe\\\\assessment\\\\src\\\\Components\\\\Comments.jsx\";\nimport React from 'react';\nimport '../Styles/Comments.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar Comment = React.createClass({\n  displayName: \"Comment\",\n  rawMarkup: function () {\n    var md = new Remarkable();\n    var rawMarkup = md.render(this.props.children.toString());\n    return {\n      __html: rawMarkup\n    };\n  },\n  render: function () {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"commentAuthor\",\n        children: this.props.author\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        dangerouslySetInnerHTML: this.rawMarkup()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this);\n  }\n});\n_c = Comment;\nvar CommentBox = React.createClass({\n  displayName: \"CommentBox\",\n  loadCommentsFromServer: function () {\n    $.ajax({\n      url: this.props.url,\n      dataType: 'json',\n      cache: false,\n      success: function (data) {\n        this.setState({\n          data: data\n        });\n      }.bind(this),\n      error: function (xhr, status, err) {\n        console.error(this.props.url, status, err.toString());\n      }.bind(this)\n    });\n  },\n  handleCommentSubmit: function (comment) {\n    var comments = this.state.data; // Optimistically set an id on the new comment. It will be replaced by an\n    // id generated by the server. In a production application you would likely\n    // not use Date.now() for this and would have a more robust system in place.\n\n    comment.id = Date.now();\n    var newComments = comments.concat([comment]);\n    this.setState({\n      data: newComments\n    });\n    $.ajax({\n      url: this.props.url,\n      dataType: 'json',\n      type: 'POST',\n      data: comment,\n      success: function (data) {\n        this.setState({\n          data: data\n        });\n      }.bind(this),\n      error: function (xhr, status, err) {\n        this.setState({\n          data: comments\n        });\n        console.error(this.props.url, status, err.toString());\n      }.bind(this)\n    });\n  },\n  getInitialState: function () {\n    return {\n      data: []\n    };\n  },\n  componentDidMount: function () {\n    this.loadCommentsFromServer();\n    setInterval(this.loadCommentsFromServer, this.props.pollInterval);\n  },\n  render: function () {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"commentBox\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Comments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CommentList, {\n        data: this.state.data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CommentForm, {\n        onCommentSubmit: this.handleCommentSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this);\n  }\n});\n_c2 = CommentBox;\nvar CommentList = React.createClass({\n  displayName: \"CommentList\",\n  render: function () {\n    var commentNodes = this.props.data.map(function (comment) {\n      return /*#__PURE__*/_jsxDEV(Comment, {\n        author: comment.author,\n        children: comment.text\n      }, comment.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"commentList\",\n      children: commentNodes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this);\n  }\n});\n_c3 = CommentList;\nvar CommentForm = React.createClass({\n  displayName: \"CommentForm\",\n  getInitialState: function () {\n    return {\n      author: '',\n      text: ''\n    };\n  },\n  handleAuthorChange: function (e) {\n    this.setState({\n      author: e.target.value\n    });\n  },\n  handleTextChange: function (e) {\n    this.setState({\n      text: e.target.value\n    });\n  },\n  handleSubmit: function (e) {\n    e.preventDefault();\n    var author = this.state.author.trim();\n    var text = this.state.text.trim();\n\n    if (!text || !author) {\n      return;\n    }\n\n    this.props.onCommentSubmit({\n      author: author,\n      text: text\n    });\n    this.setState({\n      author: '',\n      text: ''\n    });\n  },\n  render: function () {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"commentForm\",\n      onSubmit: this.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Your name\",\n        value: this.state.author,\n        onChange: this.handleAuthorChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Say something...\",\n        value: this.state.text,\n        onChange: this.handleTextChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this);\n  }\n});\n_c4 = CommentForm;\nReactDOM.render( /*#__PURE__*/_jsxDEV(CommentBox, {\n  url: \"/api/comments\",\n  pollInterval: 2000\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 136,\n  columnNumber: 3\n}, this), document.getElementById('content'));\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Comment\");\n$RefreshReg$(_c2, \"CommentBox\");\n$RefreshReg$(_c3, \"CommentList\");\n$RefreshReg$(_c4, \"CommentForm\");","map":{"version":3,"sources":["C:/Users/chloe/assessment/src/Components/Comments.jsx"],"names":["React","Comment","createClass","rawMarkup","md","Remarkable","render","props","children","toString","__html","author","CommentBox","loadCommentsFromServer","$","ajax","url","dataType","cache","success","data","setState","bind","error","xhr","status","err","console","handleCommentSubmit","comment","comments","state","id","Date","now","newComments","concat","type","getInitialState","componentDidMount","setInterval","pollInterval","CommentList","commentNodes","map","text","CommentForm","handleAuthorChange","e","target","value","handleTextChange","handleSubmit","preventDefault","trim","onCommentSubmit","ReactDOM","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport '../Styles/Comments.css';\r\n\r\nvar Comment = React.createClass({\r\n  rawMarkup: function() {\r\n    var md = new Remarkable();\r\n    var rawMarkup = md.render(this.props.children.toString());\r\n    return { __html: rawMarkup };\r\n  },\r\n\r\n  render: function() {\r\n    return (\r\n      <div className=\"comment\">\r\n        <h2 className=\"commentAuthor\">\r\n          {this.props.author}\r\n        </h2>\r\n        <span dangerouslySetInnerHTML={this.rawMarkup()} />\r\n      </div>\r\n    );\r\n  }\r\n});\r\n\r\nvar CommentBox = React.createClass({\r\n  loadCommentsFromServer: function() {\r\n    $.ajax({\r\n      url: this.props.url,\r\n      dataType: 'json',\r\n      cache: false,\r\n      success: function(data) {\r\n        this.setState({data: data});\r\n      }.bind(this),\r\n      error: function(xhr, status, err) {\r\n        console.error(this.props.url, status, err.toString());\r\n      }.bind(this)\r\n    });\r\n  },\r\n  handleCommentSubmit: function(comment) {\r\n    var comments = this.state.data;\r\n    // Optimistically set an id on the new comment. It will be replaced by an\r\n    // id generated by the server. In a production application you would likely\r\n    // not use Date.now() for this and would have a more robust system in place.\r\n    comment.id = Date.now();\r\n    var newComments = comments.concat([comment]);\r\n    this.setState({data: newComments});\r\n    $.ajax({\r\n      url: this.props.url,\r\n      dataType: 'json',\r\n      type: 'POST',\r\n      data: comment,\r\n      success: function(data) {\r\n        this.setState({data: data});\r\n      }.bind(this),\r\n      error: function(xhr, status, err) {\r\n        this.setState({data: comments});\r\n        console.error(this.props.url, status, err.toString());\r\n      }.bind(this)\r\n    });\r\n  },\r\n  getInitialState: function() {\r\n    return {data: []};\r\n  },\r\n  componentDidMount: function() {\r\n    this.loadCommentsFromServer();\r\n    setInterval(this.loadCommentsFromServer, this.props.pollInterval);\r\n  },\r\n  render: function() {\r\n    return (\r\n      <div className=\"commentBox\">\r\n        <h1>Comments</h1>\r\n        <CommentList data={this.state.data} />\r\n        <CommentForm onCommentSubmit={this.handleCommentSubmit} />\r\n      </div>\r\n    );\r\n  }\r\n});\r\n\r\nvar CommentList = React.createClass({\r\n  render: function() {\r\n    var commentNodes = this.props.data.map(function(comment) {\r\n      return (\r\n        <Comment author={comment.author} key={comment.id}>\r\n          {comment.text}\r\n        </Comment>\r\n      );\r\n    });\r\n    return (\r\n      <div className=\"commentList\">\r\n        {commentNodes}\r\n      </div>\r\n    );\r\n  }\r\n});\r\n\r\nvar CommentForm = React.createClass({\r\n  getInitialState: function() {\r\n    return {author: '', text: ''};\r\n  },\r\n  handleAuthorChange: function(e) {\r\n    this.setState({author: e.target.value});\r\n  },\r\n  handleTextChange: function(e) {\r\n    this.setState({text: e.target.value});\r\n  },\r\n  handleSubmit: function(e) {\r\n    e.preventDefault();\r\n    var author = this.state.author.trim();\r\n    var text = this.state.text.trim();\r\n    if (!text || !author) {\r\n      return;\r\n    }\r\n    this.props.onCommentSubmit({author: author, text: text});\r\n    this.setState({author: '', text: ''});\r\n  },\r\n  render: function() {\r\n    return (\r\n      <form className=\"commentForm\" onSubmit={this.handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Your name\"\r\n          value={this.state.author}\r\n          onChange={this.handleAuthorChange}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Say something...\"\r\n          value={this.state.text}\r\n          onChange={this.handleTextChange}\r\n        />\r\n        <input type=\"submit\" value=\"Post\" />\r\n      </form>\r\n    );\r\n  }\r\n});\r\n\r\nReactDOM.render(\r\n  <CommentBox url=\"/api/comments\" pollInterval={2000} />,\r\n  document.getElementById('content')\r\n);"]},"metadata":{},"sourceType":"module"}